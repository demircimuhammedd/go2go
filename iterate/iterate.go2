// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package iterate provides iterator adaptors for built-in container types.
package iterate

import (
	"context"
	"errors"
	"io"
	"reflect"
)

// SliceElems returns an iterator function that produces each successive element of s.
func SliceElems[T any](s []T) func(ctx context.Context) (T, error) {
	i := 0
	return func(context.Context) (T, error) {
		if i >= len(s) {
			return *new(T), io.EOF
		}

		x := s[i]
		i++
		return x, nil
	}
}

// ToSlice returns a slice containing the elements produced by f.
func ToSlice[T any](ctx context.Context, f func(ctx context.Context) (T, error)) ([]T, error) {
	var s []T
	for {
		x, err := f(ctx)
		if err != nil {
			if !errors.Is(err, io.EOF) {
				return s, err
			}
			return s, nil
		}
		s = append(s, x)
	}
}

// MapKeys returns an iterator function that produces each successive element
// of m, in arbitrary order.
func MapKeys[K comparable, V any](m map[K]V) func(ctx context.Context) (K, error) {
	iter := reflect.ValueOf(m).MapRange()
	if !iter.Next() {
		iter = nil
	}
	return func(ctx context.Context) (K, error) {
		if iter == nil {
			return *new(K), io.EOF
		}
		k, _ := iter.Key().Interface().(K)
		if !iter.Next() {
			iter = nil
		}
		return k, nil
	}
}

// MapElems returns an iterator function that produces each successive element
// of m, in arbitrary order.
func MapElems[K comparable, V any](m map[K]V) func(ctx context.Context) (V, error) {
	iter := reflect.ValueOf(m).MapRange()
	if !iter.Next() {
		iter = nil
	}
	return func(ctx context.Context) (V, error) {
		if iter == nil {
			return *new(V), io.EOF
		}
		v, _ := iter.Value().Interface().(V)
		if !iter.Next() {
			iter = nil
		}
		return v, nil
	}
}

// Map returns an iterator function that produces each successive keyâ€“value pair
// of m, in arbitrary order.
func Map[K comparable, V any](m map[K]V) func(ctx context.Context) (K, V, error) {
	iter := reflect.ValueOf(m).MapRange()
	if !iter.Next() {
		iter = nil
	}
	return func(ctx context.Context) (K, V, error) {
		if iter == nil {
			return *new(K), *new(V), io.EOF
		}
		k, _ := iter.Key().Interface().(K)
		v, _ := iter.Value().Interface().(V)
		if !iter.Next() {
			iter = nil
		}
		return k, v, nil
	}
}

// Chan returns an iterator function that returns each successive element received from c.
func Chan[T any](c <-chan T) func(ctx context.Context) (T, error) {
	return func(ctx context.Context) (T, error) {
		var (
			x  T
			ok bool
		)
		select {
		case x, ok = <-c:
		default:
			select {
			case <-ctx.Done():
				return x, ctx.Err()
			case x, ok = <-c:
			}
		}
		if !ok {
			return x, io.EOF
		}
		return x, nil
	}
}

// ToChan repeatedly produces a value using f and sends that value on c,
// until either ctx is done or f returns a non-nil error.
//
// ToChan does not close the channel.
// The caller may close it after IterateTo returns.
//
// If the final error from f is io.EOF,
// ToChan returns the final value from f and a nil error.
// If ctx becomes done after a call to f returned a nil error,
// ToChan returns the final (unsent) value from f and ctx.Err().
// Otherwise, IterateTo returns the final value and error from f.
//
func ToChan[T any](ctx context.Context, c chan<- T, f func(ctx context.Context) (T, error)) (T, error) {
	for {
		x, err := f(ctx)
		if err != nil {
			if !errors.Is(err, io.EOF) {
				return x, err
			}
			return x, nil
		}

		select {
		case c <- x:
		case <-ctx.Done():
			return x, ctx.Err()
		}
	}
}
