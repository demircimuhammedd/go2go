package main

import (
	"context"
	"fmt"
)

type sliceOf(type E) interface{ type []E }

func append(type S sliceOf(T), T interface{}, S2 sliceOf(T2), T2 interface{ type T })(s S, t ...T2) S {
	lens := len(s)
	tot := lens + len(t)
	if tot < 0 {
		panic("Append: cap out of range")
	}
	if tot > cap(s) {
		news := make([]T, tot, tot+tot/2)
		copy(news, s)
		s = news
	}
	for _, x := range t {
		//		s = T(x)
		_ = x
	}
	return s
}

type Funcs []func()
type Cancels []context.CancelFunc

var (
	f           func()
	cancel      context.CancelFunc
	funcSlice   []func()
	cancelSlice []context.CancelFunc
	funcs       Funcs
	cancels     Cancels
)

func main() {
	// cannot infer T
	ff := append([]func(), func(), func())(funcSlice, f)
	fmt.Printf("append(%T, %T) = %T\n", funcSlice, f, ff)

	// cannot infer T
	// returns type []func()
	var Ff Funcs = append([]func(), func(), func())(funcs, f)
	fmt.Printf("append(%T, %T) = %T\n", funcs, f, Ff)

	// cannot infer T
	fc := append([]func(), func(), context.CancelFunc)(funcSlice, cancel)
	fmt.Printf("append(%T, %T) = %T\n", funcSlice, cancel, fc)

	// cannot infer T
	// func() does not satisfy interface{type T} (func() not found in context.CancelFunc)
	// context.CancelFunc does not satisfy interface{type T} (func() not found in context.CancelFunc)
	// cf := append([]context.CancelFunc, context.CancelFunc, context.CancelFunc)(cancelSlice, f)
	// fmt.Printf("append(%T, %T) = %T\n", cancelSlice, f, cf)

	// cannot infer T
	Fc := append(Funcs, func(), context.CancelFunc)(funcs, cancel)
	fmt.Printf("append(%T, %T) = %T\n", funcs, cancel, Fc)

	// cannot infer T
	// func() does not satisfy interface{type T} (func() not found in context.CancelFunc)
	// context.CancelFunc does not satisfy interface{type T} (func() not found in context.CancelFunc)
	// Cc := append(Cancels, context.CancelFunc, context.CancelFunc)(cancels, f)
	// fmt.Printf("append(%T, %T) = %T\n", cancels, f, Cc)

	// type context.CancelFunc of cancel does not match inferred type func() for T2
	ffc := append([]func(), func(), context.CancelFunc)(funcSlice, f, cancel)
	fmt.Printf("append(%T, %T, %T) = %T\n", funcSlice, f, cancel, ffc)

	// cannot infer T
	ff2 := append([]func(), func(), func())(funcSlice, funcSlice...)
	fmt.Printf("append(%T, %T...) = %T\n", funcSlice, funcSlice, ff2)

	// type Funcs of funcs does not match []T2
	// cannot infer T
	// returns type []func()
	var FF2 Funcs = append([]func(), func(), func())(funcs, funcs...)
	fmt.Printf("append(%T, %T...) = %T\n", funcs, funcs, FF2)

	// cannot infer T
	// returns type []func()
	var Ff2 Funcs = append([]func(), func(), func())(funcs, funcSlice...)
	fmt.Printf("append(%T, %T...) = %T\n", funcs, funcSlice, Ff2)

	// cannot infer T
	// type Cancels of cancels does not match []T2
	// fc2 := append([]func(), func(), context.CancelFunc)(funcSlice, cancelSlice...)
	// fmt.Printf("append(%T, %T...) = %T\n", funcSlice, cancelSlice, fc2)

	// type Cancels of cancels does not match []T2
	// returns type []func()
	var FC2 Funcs = append([]func(), func(), context.CancelFunc)(funcs, cancels...)
	fmt.Printf("append(%T, %T...) = %T\n", funcs, cancels, FC2)
}
